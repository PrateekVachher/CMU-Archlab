#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	call check	        # Call checker code
	halt                    # should halt with 0xaaaa in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Adam Cooper ac251190
#
# 1. Included iaddq statements to lessen steps
# 2. Added one loop unroller (this took forever)
# 3. switched up registers to avoid criss-crossing 
# (I forget the technical term)
# 4. Added two more loop unrollers (this took two forevers) 
# 5. Added unroller function so unrolling could be done in factors
# (inspired by CMU lecture on YouTube)
# 6. Reordered some mov instructions that cause bubbles
# 7. Reordered functions (there's still bad jumping sorry)
# 8. Added functions to handle up to 3 extras since any multiples
# of four should be handled by the first half of the program
#
# In the end, this program really just assesses 4 indices at once
# (maximum) and adds to count if they're positive. The idea is simple
# but getting it to work was near impossible.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	
	pushq  %rbp
	rrmovq %rsp, %rbp
	pushq  %rdi
	pushq  %rsi             # push src and dst to stack
	xorq   %rax,%rax	# count = 0;
	andq   %rdx,%rdx	# len <= 0?
	jle    End		# if so, goto Done:
	iaddq  $-4, %rdx        # len -= 4
	jl     Extra            # Check for extras

Loop:	mrmovq (%rdi), %r10	# read val from src...
	mrmovq 8(%rdi), %r11    # read next val from src
	rmmovq %r10, (%rsi)	# src[i] to dst
	andq   %r10, %r10	# src[i] <= 0?
	jle    Npos0		# if so, goto Npos0:
	iaddq  $1, %rax		# count++

Npos0:	
	rmmovq %r11, 4(%rsi)    # src[i+1] to dst
	andq   %r11, %r11       # is %r11 <= 0?
	jle    Npos1		# if so, go to Npos1
	iaddq  $1, %rax         # count++

Npos1: 
	mrmovq 16(%rdi), %r10   # src[i+2] to %r10
	mrmovq 24(%rdi), %r11   # src[i+3] to %r11
	rmmovq %r10, 16(%rsi)   # src[i+2] to dst[2]
	andq   %r10, %r10       # src[i+2] <= 0? 
	jle    Npos2            # if so, go to Npos2
	iaddq  $1, %rax         # count ++

Npos2: 
	rmmovq %r11, 24(%rsi)   # src[i+3] to dst
	andq   %r11, %r11       # src[i+3] <= 0? 
	jle    Unroller         # if so, go to Unroller
	iaddq  $1, %rax         # count++ 

Unroller: 
	iaddq $32, %rdi         # start unrolling src at [i+4]
	iaddq $32, %rsi         # start unrolling dst at [i+4]
	iaddq $-4, %rdx         # len is now 4 less
	jge   Loop              # if we're not done, start unrolling

Extra:  
	iaddq $4, %rdx          # return len to the right value

Extra0:
	iaddq  $-1, %rdx        # len--
	jl     End              # finish up if no extras
	mrmovq (%rdi), %r10     # this basically does
	mrmovq 8(%rdi), %r11    # the same thing as 
	rmmovq %r10, (%rsi)     # the loop unrollers
	andq   %r10, %r10       # but starts 4 indices later.
	jle    Extra1           # pretty neat, huh?
	iaddq  $1, %rax         # count++
	
Extra1: 
	iaddq  $-1, %rdx        # len-- 
	jl     End              # finish up if no extras 
	rmmovq %r11, 8(%rsi)    # src [i+1] to dst[i+1]
	andq   %r11, %r11       # src [i+1] <= 0?
	jle    Extra2           # if so, go to Extra2
	iaddq  $1, %rax         # count++ 

Extra2: 
	iaddq  $-1, %rdx        # len-- 
	jl     End              # finish up if no extras 
	mrmovq 16(%rdi), %r10   # src[i+2] to %r10 
	rmmovq %r10, 16(%rsi)   # src[i+2] to dst[i+2] 
	andq   %r10, %r10       # src[i+2] <= 0? 
	jle    End              # if so, finish up
	iaddq  $1, %rax         # count++

End: 
	popq   %rdi             # TEAR! DOWN! THE STACK!
	popq   %rsi
	rrmovq %rbp, %rsp
	popq   %rbp 
	jmp    Done

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %rax has 2.  Set %rax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %rax to 0xcccc if not.
#   3. The source data was copied to the destination.
#      Set %rax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %rax to 0xeeee if not.
# If all checks pass, then sets %rax to 0xaaaa
check:
	# Return value test
	irmovq $2,%r10
	subq %r10,%rax
	je checkb
	irmovq $0xbbbb,%rax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovq EndFun,%rax
	irmovq StartFun,%rdx
	subq %rdx,%rax
	irmovq $1000,%rdx
	subq %rax,%rdx
	jge checkm
	irmovq $0xcccc,%rax  # Failed test #2
	jmp cdone
checkm:
	irmovq dest, %rdx # Pointer to next destination location
	irmovq src,%rbx   # Pointer to next source location
	irmovq $4,%rdi  # Count
	andq %rdi,%rdi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovq (%rdx),%rax
	mrmovq (%rbx),%rsi
	subq %rsi,%rax
	je  mok
	irmovq $0xdddd,%rax # Failed test #3
	jmp cdone
mok:
	irmovq $8,%rax
	addq %rax,%rdx	  # dest ++
	addq %rax,%rbx    # src++
	irmovq $1,%rax
	subq %rax,%rdi    # cnt--
	jg mcloop
checkpre:
	# Check for corruption
	irmovq Predest,%rdx
	mrmovq (%rdx), %rax  # Get word before destination
	irmovq $0xbcdefa, %rdx
	subq %rdx,%rax
	je checkpost
	irmovq $0xeeee,%rax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovq Postdest,%rdx
	mrmovq (%rdx), %rax  # Get word after destination
	irmovq $0xdefabc, %rdx
	subq %rdx,%rax
	je checkok
	irmovq $0xeeee,%rax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovq $0xaaaa,%rax
cdone:
	ret

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad 2
	.quad -3
	.quad -4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
